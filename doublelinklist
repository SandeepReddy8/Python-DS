class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class LinkedList:
    def __init__(self):
        self.head = None
    def insertAtBeginning(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node
    def insertAfter(self, prev_node, new_data):
        if prev_node is None:
            print("The given previous node must be in the LinkedList.")
            return
        new_node = Node(new_data)
        new_node.next = prev_node.next
        prev_node.next = new_node
    def insertAtEnd(self, new_data):
        new_node = Node(new_data)
        if self.head is None:
            self.head = new_node
            return
        last = self.head
        while last.next is not None:
            last = last.next
        last.next = new_node
   
    def search(self, key):
        current = self.head
        while current is not None:
            if current.data == key:
                return True
            current = current.next
        return False

    def sortLinkedList(self, head):
        current = head
        index = Node(None)
        if head is None:
            return
        else:
            while current is not None:
                index = current.next
                while index is not None:
                    if current.data > index.data:
                        current.data, index.data = index.data, current.data
                    index = index.next
                current = current.next

    def printList(self):
        temp = self.head
        while temp:
            print(str(temp.data) + " ", end="")
            temp = temp.next
if __name__ == '__main__':
    llist = LinkedList()
    while True:
        print("\nMenu:")
        print("1. Insert at the beginning")
        print("2. Insert after a node")
        print("3. Insert at the end")
        print("4. Delete a node")
        print("5. Search for an element")
        print("6. Sort the linked list")
        print("7. Print the linked list")
        print("8. Exit")
        choice = input("Enter your choice (1-8): ")
        if choice == "1":
            new_data = input("Enter the data to insert at the beginning: ")
            llist.insertAtBeginning(new_data)
        elif choice == "2":
            prev_data = input("Enter the data of the node after which to insert: ")
            new_data = input("Enter the data to insert: ")
            prev_node = llist.head
            while prev_node and prev_node.data != prev_data:
                prev_node = prev_node.next
            llist.insertAfter(prev_node, new_data)
        elif choice == "3":
            new_data = input("Enter the data to insert at the end: ")
            llist.insertAtEnd(new_data)
        elif choice == "4":
            position = int(input("Enter the position of the node to delete: "))
            llist.deleteNode(position)
        elif choice == "5":
            item_to_find = input("Enter the element to search: ")
            if llist.search(item_to_find):
                print(f"{item_to_find} is found")
            else:
                print(f"{item_to_find} is not found")
        elif choice == "6":
            llist.sortLinkedList(llist.head)
            print("Sorted List:")
        elif choice == "7":
            print("Linked List:")
            llist.printList()
        elif choice == "8":
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 8.")